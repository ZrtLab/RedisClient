<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2014-05-09 21:06:45</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>526</methodCount>
    <crapMethodCount>76</crapMethodCount>
    <crapLoad>480</crapLoad>
    <totalCrap>8609.66</totalCrap>
    <crapMethodPercent>14.45</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package/>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PredisServiceFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PredisClient</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($parameters = null, $options = null)</methodSignature>
      <fullMethod>__construct($parameters = null, $options = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Bootstrap</className>
      <methodName>init</methodName>
      <methodSignature>init()</methodSignature>
      <fullMethod>init()</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>Bootstrap</className>
      <methodName>getServiceManager</methodName>
      <methodSignature>getServiceManager()</methodSignature>
      <fullMethod>getServiceManager()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Bootstrap</className>
      <methodName>initAutoloader</methodName>
      <methodSignature>initAutoloader()</methodSignature>
      <fullMethod>initAutoloader()</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>Bootstrap</className>
      <methodName>findParentPath</methodName>
      <methodSignature>findParentPath($path)</methodSignature>
      <fullMethod>findParentPath($path)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($parameters = null, $options = null)</methodSignature>
      <fullMethod>__construct($parameters = null, $options = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>filterOptions</methodName>
      <methodSignature>filterOptions($options)</methodSignature>
      <fullMethod>filterOptions($options)</fullMethod>
      <crap>9.83</crap>
      <complexity>4</complexity>
      <coverage>28.57</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>initializeConnection</methodName>
      <methodSignature>initializeConnection($parameters)</methodSignature>
      <fullMethod>initializeConnection($parameters)</fullMethod>
      <crap>25</crap>
      <complexity>8</complexity>
      <coverage>35.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>getProfile</methodName>
      <methodSignature>getProfile()</methodSignature>
      <fullMethod>getProfile()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>getOptions</methodName>
      <methodSignature>getOptions()</methodSignature>
      <fullMethod>getOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>getConnectionFactory</methodName>
      <methodSignature>getConnectionFactory()</methodSignature>
      <fullMethod>getConnectionFactory()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>getClientFor</methodName>
      <methodSignature>getClientFor($connectionID)</methodSignature>
      <fullMethod>getClientFor($connectionID)</fullMethod>
      <crap>3.69</crap>
      <complexity>2</complexity>
      <coverage>25</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>connect</methodName>
      <methodSignature>connect()</methodSignature>
      <fullMethod>connect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>disconnect</methodName>
      <methodSignature>disconnect()</methodSignature>
      <fullMethod>disconnect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>quit</methodName>
      <methodSignature>quit()</methodSignature>
      <fullMethod>quit()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>isConnected</methodName>
      <methodSignature>isConnected()</methodSignature>
      <fullMethod>isConnected()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>getConnection</methodName>
      <methodSignature>getConnection()</methodSignature>
      <fullMethod>getConnection()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>getConnectionById</methodName>
      <methodSignature>getConnectionById($connectionId)</methodSignature>
      <fullMethod>getConnectionById($connectionId)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>__call</methodName>
      <methodSignature>__call($commandID, $arguments)</methodSignature>
      <fullMethod>__call($commandID, $arguments)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>createCommand</methodName>
      <methodSignature>createCommand($commandID, $arguments = array())</methodSignature>
      <fullMethod>createCommand($commandID, $arguments = array())</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>executeCommand</methodName>
      <methodSignature>executeCommand(CommandInterface $command)</methodSignature>
      <fullMethod>executeCommand(CommandInterface $command)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>onResponseError</methodName>
      <methodSignature>onResponseError(CommandInterface $command, ResponseErrorInterface $response)</methodSignature>
      <fullMethod>onResponseError(CommandInterface $command, ResponseErrorInterface $response)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>sharedInitializer</methodName>
      <methodSignature>sharedInitializer($argv, $initializer)</methodSignature>
      <fullMethod>sharedInitializer($argv, $initializer)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>pipeline</methodName>
      <methodSignature>pipeline(/* arguments */)</methodSignature>
      <fullMethod>pipeline(/* arguments */)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>initPipeline</methodName>
      <methodSignature>initPipeline(Array $options = null, $callable = null)</methodSignature>
      <fullMethod>initPipeline(Array $options = null, $callable = null)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>pipelineExecute</methodName>
      <methodSignature>pipelineExecute(PipelineContext $pipeline, $callable)</methodSignature>
      <fullMethod>pipelineExecute(PipelineContext $pipeline, $callable)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>multiExec</methodName>
      <methodSignature>multiExec(/* arguments */)</methodSignature>
      <fullMethod>multiExec(/* arguments */)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>transaction</methodName>
      <methodSignature>transaction(/* arguments */)</methodSignature>
      <fullMethod>transaction(/* arguments */)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>initMultiExec</methodName>
      <methodSignature>initMultiExec(Array $options = null, $callable = null)</methodSignature>
      <fullMethod>initMultiExec(Array $options = null, $callable = null)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>pubSub</methodName>
      <methodSignature>pubSub(/* arguments */)</methodSignature>
      <fullMethod>pubSub(/* arguments */)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>pubSubLoop</methodName>
      <methodSignature>pubSubLoop(/* arguments */)</methodSignature>
      <fullMethod>pubSubLoop(/* arguments */)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>initPubSub</methodName>
      <methodSignature>initPubSub(Array $options = null, $callable = null)</methodSignature>
      <fullMethod>initPubSub(Array $options = null, $callable = null)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Client</className>
      <methodName>monitor</methodName>
      <methodSignature>monitor()</methodSignature>
      <fullMethod>monitor()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConnectionParametersInterface $parameters)</methodSignature>
      <fullMethod>__construct(ConnectionParametersInterface $parameters)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>__destruct</methodName>
      <methodSignature>__destruct()</methodSignature>
      <fullMethod>__destruct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>checkParameters</methodName>
      <methodSignature>checkParameters(ConnectionParametersInterface $parameters)</methodSignature>
      <fullMethod>checkParameters(ConnectionParametersInterface $parameters)</fullMethod>
      <crap>6.74</crap>
      <complexity>4</complexity>
      <coverage>44.44</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>createResource</methodName>
      <methodSignature>createResource()</methodSignature>
      <fullMethod>createResource()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>isConnected</methodName>
      <methodSignature>isConnected()</methodSignature>
      <fullMethod>isConnected()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>connect</methodName>
      <methodSignature>connect()</methodSignature>
      <fullMethod>connect()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>disconnect</methodName>
      <methodSignature>disconnect()</methodSignature>
      <fullMethod>disconnect()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>pushInitCommand</methodName>
      <methodSignature>pushInitCommand(CommandInterface $command)</methodSignature>
      <fullMethod>pushInitCommand(CommandInterface $command)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>executeCommand</methodName>
      <methodSignature>executeCommand(CommandInterface $command)</methodSignature>
      <fullMethod>executeCommand(CommandInterface $command)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>readResponse</methodName>
      <methodSignature>readResponse(CommandInterface $command)</methodSignature>
      <fullMethod>readResponse(CommandInterface $command)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>onConnectionError</methodName>
      <methodSignature>onConnectionError($message, $code = null)</methodSignature>
      <fullMethod>onConnectionError($message, $code = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>onProtocolError</methodName>
      <methodSignature>onProtocolError($message)</methodSignature>
      <fullMethod>onProtocolError($message)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>onInvalidOption</methodName>
      <methodSignature>onInvalidOption($option, $parameters = null)</methodSignature>
      <fullMethod>onInvalidOption($option, $parameters = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>getResource</methodName>
      <methodSignature>getResource()</methodSignature>
      <fullMethod>getResource()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>getParameters</methodName>
      <methodSignature>getParameters()</methodSignature>
      <fullMethod>getParameters()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>getIdentifier</methodName>
      <methodSignature>getIdentifier()</methodSignature>
      <fullMethod>getIdentifier()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString()</methodSignature>
      <fullMethod>__toString()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractConnection</className>
      <methodName>__sleep</methodName>
      <methodSignature>__sleep()</methodSignature>
      <fullMethod>__sleep()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ServerProfileInterface $profile = null)</methodSignature>
      <fullMethod>__construct(ServerProfileInterface $profile = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>getDefaultSchemes</methodName>
      <methodSignature>getDefaultSchemes()</methodSignature>
      <fullMethod>getDefaultSchemes()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>checkInitializer</methodName>
      <methodSignature>checkInitializer($initializer)</methodSignature>
      <fullMethod>checkInitializer($initializer)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>define</methodName>
      <methodSignature>define($scheme, $initializer)</methodSignature>
      <fullMethod>define($scheme, $initializer)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>undefine</methodName>
      <methodSignature>undefine($scheme)</methodSignature>
      <fullMethod>undefine($scheme)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>create</methodName>
      <methodSignature>create($parameters)</methodSignature>
      <fullMethod>create($parameters)</fullMethod>
      <crap>7.1</crap>
      <complexity>6</complexity>
      <coverage>68.75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>createAggregated</methodName>
      <methodSignature>createAggregated(AggregatedConnectionInterface $connection, Array $parameters)</methodSignature>
      <fullMethod>createAggregated(AggregatedConnectionInterface $connection, Array $parameters)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>prepareConnection</methodName>
      <methodSignature>prepareConnection(SingleConnectionInterface $connection)</methodSignature>
      <fullMethod>prepareConnection(SingleConnectionInterface $connection)</fullMethod>
      <crap>5.16</crap>
      <complexity>4</complexity>
      <coverage>58.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>setProfile</methodName>
      <methodSignature>setProfile(ServerProfileInterface $profile)</methodSignature>
      <fullMethod>setProfile(ServerProfileInterface $profile)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionFactory</className>
      <methodName>getProfile</methodName>
      <methodSignature>getProfile()</methodSignature>
      <fullMethod>getProfile()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($parameters = array())</methodSignature>
      <fullMethod>__construct($parameters = array())</fullMethod>
      <crap>2.26</crap>
      <complexity>2</complexity>
      <coverage>60</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>getDefaults</methodName>
      <methodSignature>getDefaults()</methodSignature>
      <fullMethod>getDefaults()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>getValueCasters</methodName>
      <methodSignature>getValueCasters()</methodSignature>
      <fullMethod>getValueCasters()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>castBoolean</methodName>
      <methodSignature>castBoolean($value)</methodSignature>
      <fullMethod>castBoolean($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>castFloat</methodName>
      <methodSignature>castFloat($value)</methodSignature>
      <fullMethod>castFloat($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>castInteger</methodName>
      <methodSignature>castInteger($value)</methodSignature>
      <fullMethod>castInteger($value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>parseURI</methodName>
      <methodSignature>parseURI($uri)</methodSignature>
      <fullMethod>parseURI($uri)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>filter</methodName>
      <methodSignature>filter(Array $parameters)</methodSignature>
      <fullMethod>filter(Array $parameters)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>__get</methodName>
      <methodSignature>__get($parameter)</methodSignature>
      <fullMethod>__get($parameter)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>__isset</methodName>
      <methodSignature>__isset($parameter)</methodSignature>
      <fullMethod>__isset($parameter)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>toArray</methodName>
      <methodSignature>toArray()</methodSignature>
      <fullMethod>toArray()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConnectionParameters</className>
      <methodName>__sleep</methodName>
      <methodSignature>__sleep()</methodSignature>
      <fullMethod>__sleep()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConnectionParametersInterface $parameters)</methodSignature>
      <fullMethod>__construct(ConnectionParametersInterface $parameters)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>__destruct</methodName>
      <methodSignature>__destruct()</methodSignature>
      <fullMethod>__destruct()</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>createResource</methodName>
      <methodSignature>createResource()</methodSignature>
      <fullMethod>createResource()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>tcpStreamInitializer</methodName>
      <methodSignature>tcpStreamInitializer(ConnectionParametersInterface $parameters)</methodSignature>
      <fullMethod>tcpStreamInitializer(ConnectionParametersInterface $parameters)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>unixStreamInitializer</methodName>
      <methodSignature>unixStreamInitializer(ConnectionParametersInterface $parameters)</methodSignature>
      <fullMethod>unixStreamInitializer(ConnectionParametersInterface $parameters)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>connect</methodName>
      <methodSignature>connect()</methodSignature>
      <fullMethod>connect()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>disconnect</methodName>
      <methodSignature>disconnect()</methodSignature>
      <fullMethod>disconnect()</fullMethod>
      <crap>2.86</crap>
      <complexity>2</complexity>
      <coverage>40</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>sendInitializationCommands</methodName>
      <methodSignature>sendInitializationCommands()</methodSignature>
      <fullMethod>sendInitializationCommands()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>writeBytes</methodName>
      <methodSignature>writeBytes($buffer)</methodSignature>
      <fullMethod>writeBytes($buffer)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>read</methodName>
      <methodSignature>read()</methodSignature>
      <fullMethod>read()</fullMethod>
      <crap>306</crap>
      <complexity>17</complexity>
      <coverage>0</coverage>
      <crapLoad>18</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>writeCommand</methodName>
      <methodSignature>writeCommand(CommandInterface $command)</methodSignature>
      <fullMethod>writeCommand(CommandInterface $command)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StreamConnection</className>
      <methodName>__sleep</methodName>
      <methodSignature>__sleep()</methodSignature>
      <fullMethod>__sleep()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOption</className>
      <methodName>filter</methodName>
      <methodSignature>filter(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>filter(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOption</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault(ClientOptionsInterface $options)</methodSignature>
      <fullMethod>getDefault(ClientOptionsInterface $options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOption</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>__invoke(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientCluster</className>
      <methodName>checkInstance</methodName>
      <methodSignature>checkInstance($cluster)</methodSignature>
      <fullMethod>checkInstance($cluster)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientCluster</className>
      <methodName>filter</methodName>
      <methodSignature>filter(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>filter(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientCluster</className>
      <methodName>getInitializer</methodName>
      <methodSignature>getInitializer(ClientOptionsInterface $options, $fqnOrType)</methodSignature>
      <fullMethod>getInitializer(ClientOptionsInterface $options, $fqnOrType)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientCluster</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function () use ($fqnOrType)</methodSignature>
      <fullMethod>anonymous function () use ($fqnOrType)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientCluster</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault(ClientOptionsInterface $options)</methodSignature>
      <fullMethod>getDefault(ClientOptionsInterface $options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientConnectionFactory</className>
      <methodName>filter</methodName>
      <methodSignature>filter(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>filter(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientConnectionFactory</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault(ClientOptionsInterface $options)</methodSignature>
      <fullMethod>getDefault(ClientOptionsInterface $options)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientExceptions</className>
      <methodName>filter</methodName>
      <methodSignature>filter(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>filter(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientExceptions</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault(ClientOptionsInterface $options)</methodSignature>
      <fullMethod>getDefault(ClientOptionsInterface $options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientOptions</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Array $options = array())</methodSignature>
      <fullMethod>__construct(Array $options = array())</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientOptions</className>
      <methodName>getDefaultOptions</methodName>
      <methodSignature>getDefaultOptions()</methodSignature>
      <fullMethod>getDefaultOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientOptions</className>
      <methodName>initialize</methodName>
      <methodSignature>initialize(Array $options)</methodSignature>
      <fullMethod>initialize(Array $options)</fullMethod>
      <crap>4.12</crap>
      <complexity>3</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientOptions</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($options) use ($handler, $value)</methodSignature>
      <fullMethod>anonymous function ($options) use ($handler, $value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientOptions</className>
      <methodName>__isset</methodName>
      <methodSignature>__isset($option)</methodSignature>
      <fullMethod>__isset($option)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientOptions</className>
      <methodName>__get</methodName>
      <methodSignature>__get($option)</methodSignature>
      <fullMethod>__get($option)</fullMethod>
      <crap>4.03</crap>
      <complexity>4</complexity>
      <coverage>87.5</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientOptions</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault($option)</methodSignature>
      <fullMethod>getDefault($option)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientPrefix</className>
      <methodName>filter</methodName>
      <methodSignature>filter(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>filter(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientProfile</className>
      <methodName>filter</methodName>
      <methodSignature>filter(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>filter(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientProfile</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault(ClientOptionsInterface $options)</methodSignature>
      <fullMethod>getDefault(ClientOptionsInterface $options)</fullMethod>
      <crap>2.26</crap>
      <complexity>2</complexity>
      <coverage>60</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientReplication</className>
      <methodName>checkInstance</methodName>
      <methodSignature>checkInstance($connection)</methodSignature>
      <fullMethod>checkInstance($connection)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientReplication</className>
      <methodName>filter</methodName>
      <methodSignature>filter(ClientOptionsInterface $options, $value)</methodSignature>
      <fullMethod>filter(ClientOptionsInterface $options, $value)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClientReplication</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault(ClientOptionsInterface $options)</methodSignature>
      <fullMethod>getDefault(ClientOptionsInterface $options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>getSupportedCommands</methodName>
      <methodSignature>getSupportedCommands()</methodSignature>
      <fullMethod>getSupportedCommands()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>getDefault</methodName>
      <methodSignature>getDefault()</methodSignature>
      <fullMethod>getDefault()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>getDevelopment</methodName>
      <methodSignature>getDevelopment()</methodSignature>
      <fullMethod>getDevelopment()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>getDefaultProfiles</methodName>
      <methodSignature>getDefaultProfiles()</methodSignature>
      <fullMethod>getDefaultProfiles()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>define</methodName>
      <methodSignature>define($alias, $profileClass)</methodSignature>
      <fullMethod>define($alias, $profileClass)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>get</methodName>
      <methodSignature>get($version)</methodSignature>
      <fullMethod>get($version)</fullMethod>
      <crap>3.03</crap>
      <complexity>3</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>supportsCommands</methodName>
      <methodSignature>supportsCommands(Array $commands)</methodSignature>
      <fullMethod>supportsCommands(Array $commands)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>supportsCommand</methodName>
      <methodSignature>supportsCommand($command)</methodSignature>
      <fullMethod>supportsCommand($command)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>getCommandClass</methodName>
      <methodSignature>getCommandClass($command)</methodSignature>
      <fullMethod>getCommandClass($command)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>createCommand</methodName>
      <methodSignature>createCommand($method, $arguments = array())</methodSignature>
      <fullMethod>createCommand($method, $arguments = array())</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>defineCommand</methodName>
      <methodSignature>defineCommand($alias, $command)</methodSignature>
      <fullMethod>defineCommand($alias, $command)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>setProcessor</methodName>
      <methodSignature>setProcessor(CommandProcessorInterface $processor = null)</methodSignature>
      <fullMethod>setProcessor(CommandProcessorInterface $processor = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>getProcessor</methodName>
      <methodSignature>getProcessor()</methodSignature>
      <fullMethod>getProcessor()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerProfile</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString()</methodSignature>
      <fullMethod>__toString()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerVersion26</className>
      <methodName>getVersion</methodName>
      <methodSignature>getVersion()</methodSignature>
      <fullMethod>getVersion()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServerVersion26</className>
      <methodName>getSupportedCommands</methodName>
      <methodSignature>getSupportedCommands()</methodSignature>
      <fullMethod>getSupportedCommands()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>fromFile</methodName>
      <methodSignature>fromFile($filename, $returnConfigObject = false, $useIncludePath = false)</methodSignature>
      <fullMethod>fromFile($filename, $returnConfigObject = false, $useIncludePath = false)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>fromFiles</methodName>
      <methodSignature>fromFiles(array $files, $returnConfigObject = false, $useIncludePath = false)</methodSignature>
      <fullMethod>fromFiles(array $files, $returnConfigObject = false, $useIncludePath = false)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>toFile</methodName>
      <methodSignature>toFile($filename, $config)</methodSignature>
      <fullMethod>toFile($filename, $config)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>setReaderPluginManager</methodName>
      <methodSignature>setReaderPluginManager(ReaderPluginManager $readers)</methodSignature>
      <fullMethod>setReaderPluginManager(ReaderPluginManager $readers)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>getReaderPluginManager</methodName>
      <methodSignature>getReaderPluginManager()</methodSignature>
      <fullMethod>getReaderPluginManager()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>setWriterPluginManager</methodName>
      <methodSignature>setWriterPluginManager(WriterPluginManager $writers)</methodSignature>
      <fullMethod>setWriterPluginManager(WriterPluginManager $writers)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>getWriterPluginManager</methodName>
      <methodSignature>getWriterPluginManager()</methodSignature>
      <fullMethod>getWriterPluginManager()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>registerReader</methodName>
      <methodSignature>registerReader($extension, $reader)</methodSignature>
      <fullMethod>registerReader($extension, $reader)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Factory</className>
      <methodName>registerWriter</methodName>
      <methodSignature>registerWriter($extension, $writer)</methodSignature>
      <fullMethod>registerWriter($extension, $writer)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($name = null, $target = null, $params = null)</methodSignature>
      <fullMethod>__construct($name = null, $target = null, $params = null)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>getTarget</methodName>
      <methodSignature>getTarget()</methodSignature>
      <fullMethod>getTarget()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>setParams</methodName>
      <methodSignature>setParams($params)</methodSignature>
      <fullMethod>setParams($params)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>getParams</methodName>
      <methodSignature>getParams()</methodSignature>
      <fullMethod>getParams()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>getParam</methodName>
      <methodSignature>getParam($name, $default = null)</methodSignature>
      <fullMethod>getParam($name, $default = null)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>setName</methodName>
      <methodSignature>setName($name)</methodSignature>
      <fullMethod>setName($name)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>setTarget</methodName>
      <methodSignature>setTarget($target)</methodSignature>
      <fullMethod>setTarget($target)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>setParam</methodName>
      <methodSignature>setParam($name, $value)</methodSignature>
      <fullMethod>setParam($name, $value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>stopPropagation</methodName>
      <methodSignature>stopPropagation($flag = true)</methodSignature>
      <fullMethod>stopPropagation($flag = true)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Event</className>
      <methodName>propagationIsStopped</methodName>
      <methodSignature>propagationIsStopped()</methodSignature>
      <fullMethod>propagationIsStopped()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($identifiers = null)</methodSignature>
      <fullMethod>__construct($identifiers = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>setEventClass</methodName>
      <methodSignature>setEventClass($class)</methodSignature>
      <fullMethod>setEventClass($class)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>setSharedManager</methodName>
      <methodSignature>setSharedManager(SharedEventManagerInterface $sharedEventManager)</methodSignature>
      <fullMethod>setSharedManager(SharedEventManagerInterface $sharedEventManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>unsetSharedManager</methodName>
      <methodSignature>unsetSharedManager()</methodSignature>
      <fullMethod>unsetSharedManager()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>getSharedManager</methodName>
      <methodSignature>getSharedManager()</methodSignature>
      <fullMethod>getSharedManager()</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>getIdentifiers</methodName>
      <methodSignature>getIdentifiers()</methodSignature>
      <fullMethod>getIdentifiers()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>setIdentifiers</methodName>
      <methodSignature>setIdentifiers($identifiers)</methodSignature>
      <fullMethod>setIdentifiers($identifiers)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>addIdentifiers</methodName>
      <methodSignature>addIdentifiers($identifiers)</methodSignature>
      <fullMethod>addIdentifiers($identifiers)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>trigger</methodName>
      <methodSignature>trigger($event, $target = null, $argv = array(), $callback = null)</methodSignature>
      <fullMethod>trigger($event, $target = null, $argv = array(), $callback = null)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>triggerUntil</methodName>
      <methodSignature>triggerUntil($event, $target, $argv = null, $callback = null)</methodSignature>
      <fullMethod>triggerUntil($event, $target, $argv = null, $callback = null)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>attach</methodName>
      <methodSignature>attach($event, $callback = null, $priority = 1)</methodSignature>
      <fullMethod>attach($event, $callback = null, $priority = 1)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>attachAggregate</methodName>
      <methodSignature>attachAggregate(ListenerAggregateInterface $aggregate, $priority = 1)</methodSignature>
      <fullMethod>attachAggregate(ListenerAggregateInterface $aggregate, $priority = 1)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>detach</methodName>
      <methodSignature>detach($listener)</methodSignature>
      <fullMethod>detach($listener)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>detachAggregate</methodName>
      <methodSignature>detachAggregate(ListenerAggregateInterface $aggregate)</methodSignature>
      <fullMethod>detachAggregate(ListenerAggregateInterface $aggregate)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>getEvents</methodName>
      <methodSignature>getEvents()</methodSignature>
      <fullMethod>getEvents()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>getListeners</methodName>
      <methodSignature>getListeners($event)</methodSignature>
      <fullMethod>getListeners($event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>clearListeners</methodName>
      <methodSignature>clearListeners($event)</methodSignature>
      <fullMethod>clearListeners($event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>prepareArgs</methodName>
      <methodSignature>prepareArgs(array $args)</methodSignature>
      <fullMethod>prepareArgs(array $args)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>triggerListeners</methodName>
      <methodSignature>triggerListeners($event, EventInterface $e, $callback = null)</methodSignature>
      <fullMethod>triggerListeners($event, EventInterface $e, $callback = null)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>getSharedListeners</methodName>
      <methodSignature>getSharedListeners($event)</methodSignature>
      <fullMethod>getSharedListeners($event)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManager</className>
      <methodName>insertListeners</methodName>
      <methodSignature>insertListeners($masterListeners, $listeners)</methodSignature>
      <fullMethod>insertListeners($masterListeners, $listeners)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ResponseCollection</className>
      <methodName>stopped</methodName>
      <methodSignature>stopped()</methodSignature>
      <fullMethod>stopped()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ResponseCollection</className>
      <methodName>setStopped</methodName>
      <methodSignature>setStopped($flag)</methodSignature>
      <fullMethod>setStopped($flag)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ResponseCollection</className>
      <methodName>first</methodName>
      <methodSignature>first()</methodSignature>
      <fullMethod>first()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ResponseCollection</className>
      <methodName>last</methodName>
      <methodSignature>last()</methodSignature>
      <fullMethod>last()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ResponseCollection</className>
      <methodName>contains</methodName>
      <methodSignature>contains($value)</methodSignature>
      <fullMethod>contains($value)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SharedEventManager</className>
      <methodName>attach</methodName>
      <methodSignature>attach($id, $event, $callback, $priority = 1)</methodSignature>
      <fullMethod>attach($id, $event, $callback, $priority = 1)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SharedEventManager</className>
      <methodName>attachAggregate</methodName>
      <methodSignature>attachAggregate(SharedListenerAggregateInterface $aggregate, $priority = 1)</methodSignature>
      <fullMethod>attachAggregate(SharedListenerAggregateInterface $aggregate, $priority = 1)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SharedEventManager</className>
      <methodName>detach</methodName>
      <methodSignature>detach($id, CallbackHandler $listener)</methodSignature>
      <fullMethod>detach($id, CallbackHandler $listener)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SharedEventManager</className>
      <methodName>detachAggregate</methodName>
      <methodSignature>detachAggregate(SharedListenerAggregateInterface $aggregate)</methodSignature>
      <fullMethod>detachAggregate(SharedListenerAggregateInterface $aggregate)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SharedEventManager</className>
      <methodName>getEvents</methodName>
      <methodSignature>getEvents($id)</methodSignature>
      <fullMethod>getEvents($id)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SharedEventManager</className>
      <methodName>getListeners</methodName>
      <methodSignature>getListeners($id, $event)</methodSignature>
      <fullMethod>getListeners($id, $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SharedEventManager</className>
      <methodName>clearListeners</methodName>
      <methodSignature>clearListeners($id, $event = null)</methodSignature>
      <fullMethod>clearListeners($id, $event = null)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StaticEventManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StaticEventManager</className>
      <methodName>__clone</methodName>
      <methodSignature>__clone()</methodSignature>
      <fullMethod>__clone()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StaticEventManager</className>
      <methodName>getInstance</methodName>
      <methodSignature>getInstance()</methodSignature>
      <fullMethod>getInstance()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StaticEventManager</className>
      <methodName>setInstance</methodName>
      <methodSignature>setInstance(SharedEventManagerInterface $instance)</methodSignature>
      <fullMethod>setInstance(SharedEventManagerInterface $instance)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StaticEventManager</className>
      <methodName>hasInstance</methodName>
      <methodSignature>hasInstance()</methodSignature>
      <fullMethod>hasInstance()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StaticEventManager</className>
      <methodName>resetInstance</methodName>
      <methodSignature>resetInstance()</methodSignature>
      <fullMethod>resetInstance()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FilterPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormAbstractServiceFactory</className>
      <methodName>canCreateServiceWithName</methodName>
      <methodSignature>canCreateServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName)</methodSignature>
      <fullMethod>canCreateServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormAbstractServiceFactory</className>
      <methodName>createServiceWithName</methodName>
      <methodSignature>createServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName)</methodSignature>
      <fullMethod>createServiceWithName(ServiceLocatorInterface $serviceLocator, $name, $requestedName)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormAbstractServiceFactory</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig(ServiceLocatorInterface $services)</methodSignature>
      <fullMethod>getConfig(ServiceLocatorInterface $services)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormAbstractServiceFactory</className>
      <methodName>getFormFactory</methodName>
      <methodSignature>getFormFactory(ServiceLocatorInterface $services)</methodSignature>
      <fullMethod>getFormFactory(ServiceLocatorInterface $services)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormAbstractServiceFactory</className>
      <methodName>marshalInputFilter</methodName>
      <methodSignature>marshalInputFilter(array &amp;$config, ServiceLocatorInterface $services, Factory $formFactory)</methodSignature>
      <fullMethod>marshalInputFilter(array &amp;$config, ServiceLocatorInterface $services, Factory $formFactory)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormElementManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConfigInterface $configuration = null)</methodSignature>
      <fullMethod>__construct(ConfigInterface $configuration = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormElementManager</className>
      <methodName>injectFactory</methodName>
      <methodSignature>injectFactory($element)</methodSignature>
      <fullMethod>injectFactory($element)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormElementManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormElementManager</className>
      <methodName>get</methodName>
      <methodSignature>get($name, $options = array(), $usePeeringServiceManagers = true)</methodSignature>
      <fullMethod>get($name, $options = array(), $usePeeringServiceManagers = true)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormElementManager</className>
      <methodName>createFromInvokable</methodName>
      <methodSignature>createFromInvokable($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createFromInvokable($canonicalName, $requestedName)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperConfig</className>
      <methodName>configureServiceManager</methodName>
      <methodSignature>configureServiceManager(ServiceManager $serviceManager)</methodSignature>
      <fullMethod>configureServiceManager(ServiceManager $serviceManager)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperConfig</className>
      <methodName>configureServiceManager</methodName>
      <methodSignature>configureServiceManager(ServiceManager $serviceManager)</methodSignature>
      <fullMethod>configureServiceManager(ServiceManager $serviceManager)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InputFilterPluginManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConfigInterface $configuration = null)</methodSignature>
      <fullMethod>__construct(ConfigInterface $configuration = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InputFilterPluginManager</className>
      <methodName>populateFactory</methodName>
      <methodSignature>populateFactory($inputfilter)</methodSignature>
      <fullMethod>populateFactory($inputfilter)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InputFilterPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderFactory</className>
      <methodName>factory</methodName>
      <methodSignature>factory($options = null)</methodSignature>
      <fullMethod>factory($options = null)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderFactory</className>
      <methodName>getRegisteredAutoloaders</methodName>
      <methodSignature>getRegisteredAutoloaders()</methodSignature>
      <fullMethod>getRegisteredAutoloaders()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderFactory</className>
      <methodName>getRegisteredAutoloader</methodName>
      <methodSignature>getRegisteredAutoloader($class)</methodSignature>
      <fullMethod>getRegisteredAutoloader($class)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderFactory</className>
      <methodName>unregisterAutoloaders</methodName>
      <methodSignature>unregisterAutoloaders()</methodSignature>
      <fullMethod>unregisterAutoloaders()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderFactory</className>
      <methodName>unregisterAutoloader</methodName>
      <methodSignature>unregisterAutoloader($autoloaderClass)</methodSignature>
      <fullMethod>unregisterAutoloader($autoloaderClass)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderFactory</className>
      <methodName>getStandardAutoloader</methodName>
      <methodSignature>getStandardAutoloader()</methodSignature>
      <fullMethod>getStandardAutoloader()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderFactory</className>
      <methodName>isSubclassOf</methodName>
      <methodSignature>isSubclassOf($className, $type)</methodSignature>
      <fullMethod>isSubclassOf($className, $type)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($options = null)</methodSignature>
      <fullMethod>__construct($options = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions($options)</methodSignature>
      <fullMethod>setOptions($options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>registerAutoloadMap</methodName>
      <methodSignature>registerAutoloadMap($map)</methodSignature>
      <fullMethod>registerAutoloadMap($map)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>registerAutoloadMaps</methodName>
      <methodSignature>registerAutoloadMaps($locations)</methodSignature>
      <fullMethod>registerAutoloadMaps($locations)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>getAutoloadMap</methodName>
      <methodSignature>getAutoloadMap()</methodSignature>
      <fullMethod>getAutoloadMap()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>autoload</methodName>
      <methodSignature>autoload($class)</methodSignature>
      <fullMethod>autoload($class)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>register</methodName>
      <methodSignature>register()</methodSignature>
      <fullMethod>register()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>loadMapFromFile</methodName>
      <methodSignature>loadMapFromFile($location)</methodSignature>
      <fullMethod>loadMapFromFile($location)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>realPharPath</methodName>
      <methodSignature>realPharPath($path)</methodSignature>
      <fullMethod>realPharPath($path)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ClassMapAutoloader</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($value, $key) use (&amp;$parts)</methodSignature>
      <fullMethod>anonymous function ($value, $key) use (&amp;$parts)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($options = null)</methodSignature>
      <fullMethod>__construct($options = null)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions($options)</methodSignature>
      <fullMethod>setOptions($options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>getModuleClassMap</methodName>
      <methodSignature>getModuleClassMap()</methodSignature>
      <fullMethod>getModuleClassMap()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>setModuleClassMap</methodName>
      <methodSignature>setModuleClassMap(array $classmap)</methodSignature>
      <fullMethod>setModuleClassMap(array $classmap)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>autoload</methodName>
      <methodSignature>autoload($class)</methodSignature>
      <fullMethod>autoload($class)</fullMethod>
      <crap>552</crap>
      <complexity>23</complexity>
      <coverage>0</coverage>
      <crapLoad>24</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>loadModuleFromDir</methodName>
      <methodSignature>loadModuleFromDir($dirPath, $class)</methodSignature>
      <fullMethod>loadModuleFromDir($dirPath, $class)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>loadModuleFromPhar</methodName>
      <methodSignature>loadModuleFromPhar($pharPath, $class)</methodSignature>
      <fullMethod>loadModuleFromPhar($pharPath, $class)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>register</methodName>
      <methodSignature>register()</methodSignature>
      <fullMethod>register()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>unregister</methodName>
      <methodSignature>unregister()</methodSignature>
      <fullMethod>unregister()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>registerPaths</methodName>
      <methodSignature>registerPaths($paths)</methodSignature>
      <fullMethod>registerPaths($paths)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>registerPath</methodName>
      <methodSignature>registerPath($path, $moduleName = false)</methodSignature>
      <fullMethod>registerPath($path, $moduleName = false)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>getPaths</methodName>
      <methodSignature>getPaths()</methodSignature>
      <fullMethod>getPaths()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>pharFileToModuleName</methodName>
      <methodSignature>pharFileToModuleName($pharPath)</methodSignature>
      <fullMethod>pharFileToModuleName($pharPath)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleAutoloader</className>
      <methodName>normalizePath</methodName>
      <methodSignature>normalizePath($path, $trailingSlash = true)</methodSignature>
      <fullMethod>normalizePath($path, $trailingSlash = true)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($options = null)</methodSignature>
      <fullMethod>__construct($options = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions($options)</methodSignature>
      <fullMethod>setOptions($options)</fullMethod>
      <crap>182</crap>
      <complexity>13</complexity>
      <coverage>0</coverage>
      <crapLoad>13</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>setFallbackAutoloader</methodName>
      <methodSignature>setFallbackAutoloader($flag)</methodSignature>
      <fullMethod>setFallbackAutoloader($flag)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>isFallbackAutoloader</methodName>
      <methodSignature>isFallbackAutoloader()</methodSignature>
      <fullMethod>isFallbackAutoloader()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>registerNamespace</methodName>
      <methodSignature>registerNamespace($namespace, $directory)</methodSignature>
      <fullMethod>registerNamespace($namespace, $directory)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>registerNamespaces</methodName>
      <methodSignature>registerNamespaces($namespaces)</methodSignature>
      <fullMethod>registerNamespaces($namespaces)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>registerPrefix</methodName>
      <methodSignature>registerPrefix($prefix, $directory)</methodSignature>
      <fullMethod>registerPrefix($prefix, $directory)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>registerPrefixes</methodName>
      <methodSignature>registerPrefixes($prefixes)</methodSignature>
      <fullMethod>registerPrefixes($prefixes)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>autoload</methodName>
      <methodSignature>autoload($class)</methodSignature>
      <fullMethod>autoload($class)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>register</methodName>
      <methodSignature>register()</methodSignature>
      <fullMethod>register()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>transformClassNameToFilename</methodName>
      <methodSignature>transformClassNameToFilename($class, $directory)</methodSignature>
      <fullMethod>transformClassNameToFilename($class, $directory)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>loadClass</methodName>
      <methodSignature>loadClass($class, $type)</methodSignature>
      <fullMethod>loadClass($class, $type)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>StandardAutoloader</className>
      <methodName>normalizeDirectory</methodName>
      <methodSignature>normalizeDirectory($directory)</methodSignature>
      <fullMethod>normalizeDirectory($directory)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ProcessorPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>WriterPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ListenerOptions $options = null)</methodSignature>
      <fullMethod>__construct(ListenerOptions $options = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractListener</className>
      <methodName>getOptions</methodName>
      <methodSignature>getOptions()</methodSignature>
      <fullMethod>getOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractListener</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(ListenerOptions $options)</methodSignature>
      <fullMethod>setOptions(ListenerOptions $options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractListener</className>
      <methodName>writeArrayToFile</methodName>
      <methodSignature>writeArrayToFile($filePath, $array)</methodSignature>
      <fullMethod>writeArrayToFile($filePath, $array)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AutoloaderListener</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke(ModuleEvent $e)</methodSignature>
      <fullMethod>__invoke(ModuleEvent $e)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ListenerOptions $options = null)</methodSignature>
      <fullMethod>__construct(ListenerOptions $options = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>onloadModulesPre</methodName>
      <methodSignature>onloadModulesPre(ModuleEvent $e)</methodSignature>
      <fullMethod>onloadModulesPre(ModuleEvent $e)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>onLoadModule</methodName>
      <methodSignature>onLoadModule(ModuleEvent $e)</methodSignature>
      <fullMethod>onLoadModule(ModuleEvent $e)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>onMergeConfig</methodName>
      <methodSignature>onMergeConfig(ModuleEvent $e)</methodSignature>
      <fullMethod>onMergeConfig(ModuleEvent $e)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>onLoadModules</methodName>
      <methodSignature>onLoadModules(ModuleEvent $e)</methodSignature>
      <fullMethod>onLoadModules(ModuleEvent $e)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>getMergedConfig</methodName>
      <methodSignature>getMergedConfig($returnConfigAsObject = true)</methodSignature>
      <fullMethod>getMergedConfig($returnConfigAsObject = true)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>setMergedConfig</methodName>
      <methodSignature>setMergedConfig(array $config)</methodSignature>
      <fullMethod>setMergedConfig(array $config)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfigGlobPaths</methodName>
      <methodSignature>addConfigGlobPaths($globPaths)</methodSignature>
      <fullMethod>addConfigGlobPaths($globPaths)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfigGlobPath</methodName>
      <methodSignature>addConfigGlobPath($globPath)</methodSignature>
      <fullMethod>addConfigGlobPath($globPath)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfigStaticPaths</methodName>
      <methodSignature>addConfigStaticPaths($staticPaths)</methodSignature>
      <fullMethod>addConfigStaticPaths($staticPaths)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfigStaticPath</methodName>
      <methodSignature>addConfigStaticPath($staticPath)</methodSignature>
      <fullMethod>addConfigStaticPath($staticPath)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfigPaths</methodName>
      <methodSignature>addConfigPaths($paths, $type)</methodSignature>
      <fullMethod>addConfigPaths($paths, $type)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfigPath</methodName>
      <methodSignature>addConfigPath($path, $type)</methodSignature>
      <fullMethod>addConfigPath($path, $type)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfig</methodName>
      <methodSignature>addConfig($key, $config)</methodSignature>
      <fullMethod>addConfig($key, $config)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>addConfigByPath</methodName>
      <methodSignature>addConfigByPath($path, $type)</methodSignature>
      <fullMethod>addConfigByPath($path, $type)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>hasCachedConfig</methodName>
      <methodSignature>hasCachedConfig()</methodSignature>
      <fullMethod>hasCachedConfig()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigListener</className>
      <methodName>getCachedConfig</methodName>
      <methodSignature>getCachedConfig()</methodSignature>
      <fullMethod>getCachedConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>DefaultListenerAggregate</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>DefaultListenerAggregate</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>DefaultListenerAggregate</className>
      <methodName>getConfigListener</methodName>
      <methodSignature>getConfigListener()</methodSignature>
      <fullMethod>getConfigListener()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>DefaultListenerAggregate</className>
      <methodName>setConfigListener</methodName>
      <methodSignature>setConfigListener(ConfigMergerInterface $configListener)</methodSignature>
      <fullMethod>setConfigListener(ConfigMergerInterface $configListener)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>InitTrigger</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke(ModuleEvent $e)</methodSignature>
      <fullMethod>__invoke(ModuleEvent $e)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getModulePaths</methodName>
      <methodSignature>getModulePaths()</methodSignature>
      <fullMethod>getModulePaths()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setModulePaths</methodName>
      <methodSignature>setModulePaths($modulePaths)</methodSignature>
      <fullMethod>setModulePaths($modulePaths)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getConfigGlobPaths</methodName>
      <methodSignature>getConfigGlobPaths()</methodSignature>
      <fullMethod>getConfigGlobPaths()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getConfigStaticPaths</methodName>
      <methodSignature>getConfigStaticPaths()</methodSignature>
      <fullMethod>getConfigStaticPaths()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setConfigGlobPaths</methodName>
      <methodSignature>setConfigGlobPaths($configGlobPaths)</methodSignature>
      <fullMethod>setConfigGlobPaths($configGlobPaths)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setConfigStaticPaths</methodName>
      <methodSignature>setConfigStaticPaths($configStaticPaths)</methodSignature>
      <fullMethod>setConfigStaticPaths($configStaticPaths)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getExtraConfig</methodName>
      <methodSignature>getExtraConfig()</methodSignature>
      <fullMethod>getExtraConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setExtraConfig</methodName>
      <methodSignature>setExtraConfig($extraConfig)</methodSignature>
      <fullMethod>setExtraConfig($extraConfig)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getConfigCacheEnabled</methodName>
      <methodSignature>getConfigCacheEnabled()</methodSignature>
      <fullMethod>getConfigCacheEnabled()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setConfigCacheEnabled</methodName>
      <methodSignature>setConfigCacheEnabled($enabled)</methodSignature>
      <fullMethod>setConfigCacheEnabled($enabled)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getConfigCacheKey</methodName>
      <methodSignature>getConfigCacheKey()</methodSignature>
      <fullMethod>getConfigCacheKey()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setConfigCacheKey</methodName>
      <methodSignature>setConfigCacheKey($configCacheKey)</methodSignature>
      <fullMethod>setConfigCacheKey($configCacheKey)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getConfigCacheFile</methodName>
      <methodSignature>getConfigCacheFile()</methodSignature>
      <fullMethod>getConfigCacheFile()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getCacheDir</methodName>
      <methodSignature>getCacheDir()</methodSignature>
      <fullMethod>getCacheDir()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setCacheDir</methodName>
      <methodSignature>setCacheDir($cacheDir)</methodSignature>
      <fullMethod>setCacheDir($cacheDir)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getModuleMapCacheEnabled</methodName>
      <methodSignature>getModuleMapCacheEnabled()</methodSignature>
      <fullMethod>getModuleMapCacheEnabled()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setModuleMapCacheEnabled</methodName>
      <methodSignature>setModuleMapCacheEnabled($enabled)</methodSignature>
      <fullMethod>setModuleMapCacheEnabled($enabled)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getModuleMapCacheKey</methodName>
      <methodSignature>getModuleMapCacheKey()</methodSignature>
      <fullMethod>getModuleMapCacheKey()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setModuleMapCacheKey</methodName>
      <methodSignature>setModuleMapCacheKey($moduleMapCacheKey)</methodSignature>
      <fullMethod>setModuleMapCacheKey($moduleMapCacheKey)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getModuleMapCacheFile</methodName>
      <methodSignature>getModuleMapCacheFile()</methodSignature>
      <fullMethod>getModuleMapCacheFile()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>getCheckDependencies</methodName>
      <methodSignature>getCheckDependencies()</methodSignature>
      <fullMethod>getCheckDependencies()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>setCheckDependencies</methodName>
      <methodSignature>setCheckDependencies($checkDependencies)</methodSignature>
      <fullMethod>setCheckDependencies($checkDependencies)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ListenerOptions</className>
      <methodName>normalizePath</methodName>
      <methodSignature>normalizePath($path)</methodSignature>
      <fullMethod>normalizePath($path)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>LocatorRegistrationListener</className>
      <methodName>onLoadModule</methodName>
      <methodSignature>onLoadModule(ModuleEvent $e)</methodSignature>
      <fullMethod>onLoadModule(ModuleEvent $e)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>LocatorRegistrationListener</className>
      <methodName>onLoadModules</methodName>
      <methodSignature>onLoadModules(Event $e)</methodSignature>
      <fullMethod>onLoadModules(Event $e)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>LocatorRegistrationListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($e) use ($moduleManager)</methodSignature>
      <fullMethod>anonymous function ($e) use ($moduleManager)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>LocatorRegistrationListener</className>
      <methodName>onBootstrap</methodName>
      <methodSignature>onBootstrap(Event $e)</methodSignature>
      <fullMethod>onBootstrap(Event $e)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>LocatorRegistrationListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>LocatorRegistrationListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleDependencyCheckerListener</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke(ModuleEvent $e)</methodSignature>
      <fullMethod>__invoke(ModuleEvent $e)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleLoaderListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ListenerOptions $options = null)</methodSignature>
      <fullMethod>__construct(ListenerOptions $options = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleLoaderListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleLoaderListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleLoaderListener</className>
      <methodName>hasCachedClassMap</methodName>
      <methodSignature>hasCachedClassMap()</methodSignature>
      <fullMethod>hasCachedClassMap()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleLoaderListener</className>
      <methodName>getCachedConfig</methodName>
      <methodSignature>getCachedConfig()</methodSignature>
      <fullMethod>getCachedConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleLoaderListener</className>
      <methodName>onLoadModulesPost</methodName>
      <methodSignature>onLoadModulesPost(ModuleEvent $event)</methodSignature>
      <fullMethod>onLoadModulesPost(ModuleEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleResolverListener</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke(ModuleEvent $e)</methodSignature>
      <fullMethod>__invoke(ModuleEvent $e)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>OnBootstrapListener</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke(ModuleEvent $e)</methodSignature>
      <fullMethod>__invoke(ModuleEvent $e)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ServiceManager $serviceManager, $configuration = null)</methodSignature>
      <fullMethod>__construct(ServiceManager $serviceManager, $configuration = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>setDefaultServiceConfig</methodName>
      <methodSignature>setDefaultServiceConfig($configuration)</methodSignature>
      <fullMethod>setDefaultServiceConfig($configuration)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>addServiceManager</methodName>
      <methodSignature>addServiceManager($serviceManager, $key, $moduleInterface, $method)</methodSignature>
      <fullMethod>addServiceManager($serviceManager, $key, $moduleInterface, $method)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>onLoadModule</methodName>
      <methodSignature>onLoadModule(ModuleEvent $e)</methodSignature>
      <fullMethod>onLoadModule(ModuleEvent $e)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>onLoadModulesPost</methodName>
      <methodSignature>onLoadModulesPost(ModuleEvent $e)</methodSignature>
      <fullMethod>onLoadModulesPost(ModuleEvent $e)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListener</className>
      <methodName>serviceConfigToArray</methodName>
      <methodSignature>serviceConfigToArray($config)</methodSignature>
      <fullMethod>serviceConfigToArray($config)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleEvent</className>
      <methodName>getModuleName</methodName>
      <methodSignature>getModuleName()</methodSignature>
      <fullMethod>getModuleName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleEvent</className>
      <methodName>setModuleName</methodName>
      <methodSignature>setModuleName($moduleName)</methodSignature>
      <fullMethod>setModuleName($moduleName)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleEvent</className>
      <methodName>getModule</methodName>
      <methodSignature>getModule()</methodSignature>
      <fullMethod>getModule()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleEvent</className>
      <methodName>setModule</methodName>
      <methodSignature>setModule($module)</methodSignature>
      <fullMethod>setModule($module)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleEvent</className>
      <methodName>getConfigListener</methodName>
      <methodSignature>getConfigListener()</methodSignature>
      <fullMethod>getConfigListener()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleEvent</className>
      <methodName>setConfigListener</methodName>
      <methodSignature>setConfigListener(Listener\ConfigMergerInterface $configListener)</methodSignature>
      <fullMethod>setConfigListener(Listener\ConfigMergerInterface $configListener)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($modules, EventManagerInterface $eventManager = null)</methodSignature>
      <fullMethod>__construct($modules, EventManagerInterface $eventManager = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>onLoadModules</methodName>
      <methodSignature>onLoadModules()</methodSignature>
      <fullMethod>onLoadModules()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>loadModules</methodName>
      <methodSignature>loadModules()</methodSignature>
      <fullMethod>loadModules()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>loadModule</methodName>
      <methodSignature>loadModule($module)</methodSignature>
      <fullMethod>loadModule($module)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>loadModuleByName</methodName>
      <methodSignature>loadModuleByName($event)</methodSignature>
      <fullMethod>loadModuleByName($event)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($r)</methodSignature>
      <fullMethod>anonymous function ($r)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>getLoadedModules</methodName>
      <methodSignature>getLoadedModules($loadModules = false)</methodSignature>
      <fullMethod>getLoadedModules($loadModules = false)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>getModule</methodName>
      <methodSignature>getModule($moduleName)</methodSignature>
      <fullMethod>getModule($moduleName)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>getModules</methodName>
      <methodSignature>getModules()</methodSignature>
      <fullMethod>getModules()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>setModules</methodName>
      <methodSignature>setModules($modules)</methodSignature>
      <fullMethod>setModules($modules)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>getEvent</methodName>
      <methodSignature>getEvent()</methodSignature>
      <fullMethod>getEvent()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>setEvent</methodName>
      <methodSignature>setEvent(ModuleEvent $event)</methodSignature>
      <fullMethod>setEvent(ModuleEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $events)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>getEventManager</methodName>
      <methodSignature>getEventManager()</methodSignature>
      <fullMethod>getEventManager()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManager</className>
      <methodName>attachDefaultListeners</methodName>
      <methodSignature>attachDefaultListeners()</methodSignature>
      <fullMethod>attachDefaultListeners()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ControllerManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConfigInterface $configuration = null)</methodSignature>
      <fullMethod>__construct(ConfigInterface $configuration = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ControllerManager</className>
      <methodName>injectControllerDependencies</methodName>
      <methodSignature>injectControllerDependencies($controller, ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>injectControllerDependencies($controller, ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ControllerManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ControllerManager</className>
      <methodName>has</methodName>
      <methodSignature>has($name, $checkAbstractFactories = true, $usePeeringServiceManagers = false)</methodSignature>
      <fullMethod>has($name, $checkAbstractFactories = true, $usePeeringServiceManagers = false)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ControllerManager</className>
      <methodName>get</methodName>
      <methodSignature>get($name, $options = array(), $usePeeringServiceManagers = false)</methodSignature>
      <fullMethod>get($name, $options = array(), $usePeeringServiceManagers = false)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PluginManager</className>
      <methodName>get</methodName>
      <methodSignature>get($name, $options = array(), $usePeeringServiceManagers = true)</methodSignature>
      <fullMethod>get($name, $options = array(), $usePeeringServiceManagers = true)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PluginManager</className>
      <methodName>setController</methodName>
      <methodSignature>setController(DispatchableInterface $controller)</methodSignature>
      <fullMethod>setController(DispatchableInterface $controller)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PluginManager</className>
      <methodName>getController</methodName>
      <methodSignature>getController()</methodSignature>
      <fullMethod>getController()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PluginManager</className>
      <methodName>injectController</methodName>
      <methodSignature>injectController($plugin)</methodSignature>
      <fullMethod>injectController($plugin)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setApplication</methodName>
      <methodSignature>setApplication(ApplicationInterface $application)</methodSignature>
      <fullMethod>setApplication(ApplicationInterface $application)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getApplication</methodName>
      <methodSignature>getApplication()</methodSignature>
      <fullMethod>getApplication()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getRouter</methodName>
      <methodSignature>getRouter()</methodSignature>
      <fullMethod>getRouter()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setRouter</methodName>
      <methodSignature>setRouter(Router\RouteStackInterface $router)</methodSignature>
      <fullMethod>setRouter(Router\RouteStackInterface $router)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getRouteMatch</methodName>
      <methodSignature>getRouteMatch()</methodSignature>
      <fullMethod>getRouteMatch()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setRouteMatch</methodName>
      <methodSignature>setRouteMatch(Router\RouteMatch $matches)</methodSignature>
      <fullMethod>setRouteMatch(Router\RouteMatch $matches)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getRequest</methodName>
      <methodSignature>getRequest()</methodSignature>
      <fullMethod>getRequest()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setRequest</methodName>
      <methodSignature>setRequest(Request $request)</methodSignature>
      <fullMethod>setRequest(Request $request)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getResponse</methodName>
      <methodSignature>getResponse()</methodSignature>
      <fullMethod>getResponse()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setResponse</methodName>
      <methodSignature>setResponse(Response $response)</methodSignature>
      <fullMethod>setResponse(Response $response)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setViewModel</methodName>
      <methodSignature>setViewModel(Model $viewModel)</methodSignature>
      <fullMethod>setViewModel(Model $viewModel)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getViewModel</methodName>
      <methodSignature>getViewModel()</methodSignature>
      <fullMethod>getViewModel()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getResult</methodName>
      <methodSignature>getResult()</methodSignature>
      <fullMethod>getResult()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setResult</methodName>
      <methodSignature>setResult($result)</methodSignature>
      <fullMethod>setResult($result)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>isError</methodName>
      <methodSignature>isError()</methodSignature>
      <fullMethod>isError()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setError</methodName>
      <methodSignature>setError($message)</methodSignature>
      <fullMethod>setError($message)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getError</methodName>
      <methodSignature>getError()</methodSignature>
      <fullMethod>getError()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getController</methodName>
      <methodSignature>getController()</methodSignature>
      <fullMethod>getController()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setController</methodName>
      <methodSignature>setController($name)</methodSignature>
      <fullMethod>setController($name)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>getControllerClass</methodName>
      <methodSignature>getControllerClass()</methodSignature>
      <fullMethod>getControllerClass()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>MvcEvent</className>
      <methodName>setControllerClass</methodName>
      <methodSignature>setControllerClass($class)</methodSignature>
      <fullMethod>setControllerClass($class)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>RoutePluginManager</className>
      <methodName>setInvokableClass</methodName>
      <methodSignature>setInvokableClass($name, $invokableClass, $shared = null)</methodSignature>
      <fullMethod>setInvokableClass($name, $invokableClass, $shared = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>RoutePluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>RoutePluginManager</className>
      <methodName>createFromInvokable</methodName>
      <methodSignature>createFromInvokable($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createFromInvokable($canonicalName, $requestedName)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManagerFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ConfigFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ControllerLoaderFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>EventManagerFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>FormElementManagerFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ModuleManagerFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceListenerFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManagerConfig</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(array $configuration = array())</methodSignature>
      <fullMethod>__construct(array $configuration = array())</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManagerConfig</className>
      <methodName>configureServiceManager</methodName>
      <methodSignature>configureServiceManager(ServiceManager $serviceManager)</methodSignature>
      <fullMethod>configureServiceManager(ServiceManager $serviceManager)</fullMethod>
      <crap>72.97</crap>
      <complexity>10</complexity>
      <coverage>14.29</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManagerConfig</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($instance) use ($serviceManager)</methodSignature>
      <fullMethod>anonymous function ($instance) use ($serviceManager)</fullMethod>
      <crap>2.5</crap>
      <complexity>2</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ViewHelperManagerFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>240</crap>
      <complexity>15</complexity>
      <coverage>0</coverage>
      <crapLoad>16</crapLoad>
    </method>
    <method>
      <package/>
      <className>ViewHelperManagerFactory</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($sm) use ($serviceLocator)</methodSignature>
      <fullMethod>anonymous function ($sm) use ($serviceLocator)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperConfig</className>
      <methodName>configureServiceManager</methodName>
      <methodSignature>configureServiceManager(ServiceManager $serviceManager)</methodSignature>
      <fullMethod>configureServiceManager(ServiceManager $serviceManager)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperConfig</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function (HelperPluginManager $pm)</methodSignature>
      <fullMethod>anonymous function (HelperPluginManager $pm)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AdapterPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConfigInterface $configuration = null)</methodSignature>
      <fullMethod>__construct(ConfigInterface $configuration = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($instance) use ($self)</methodSignature>
      <fullMethod>anonymous function ($instance) use ($self)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>get</methodName>
      <methodSignature>get($name, $options = array(), $usePeeringServiceManagers = true)</methodSignature>
      <fullMethod>get($name, $options = array(), $usePeeringServiceManagers = true)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>setService</methodName>
      <methodSignature>setService($name, $service, $shared = true)</methodSignature>
      <fullMethod>setService($name, $service, $shared = true)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>setServiceLocator</methodName>
      <methodSignature>setServiceLocator(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>setServiceLocator(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>getServiceLocator</methodName>
      <methodSignature>getServiceLocator()</methodSignature>
      <fullMethod>getServiceLocator()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>createFromInvokable</methodName>
      <methodSignature>createFromInvokable($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createFromInvokable($canonicalName, $requestedName)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>createFromFactory</methodName>
      <methodSignature>createFromFactory($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createFromFactory($canonicalName, $requestedName)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractPluginManager</className>
      <methodName>createServiceViaCallback</methodName>
      <methodSignature>createServiceViaCallback($callable, $cName, $rName)</methodSignature>
      <fullMethod>createServiceViaCallback($callable, $cName, $rName)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($config = array())</methodSignature>
      <fullMethod>__construct($config = array())</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getAllowOverride</methodName>
      <methodSignature>getAllowOverride()</methodSignature>
      <fullMethod>getAllowOverride()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getFactories</methodName>
      <methodSignature>getFactories()</methodSignature>
      <fullMethod>getFactories()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getAbstractFactories</methodName>
      <methodSignature>getAbstractFactories()</methodSignature>
      <fullMethod>getAbstractFactories()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getInvokables</methodName>
      <methodSignature>getInvokables()</methodSignature>
      <fullMethod>getInvokables()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getServices</methodName>
      <methodSignature>getServices()</methodSignature>
      <fullMethod>getServices()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getAliases</methodName>
      <methodSignature>getAliases()</methodSignature>
      <fullMethod>getAliases()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getInitializers</methodName>
      <methodSignature>getInitializers()</methodSignature>
      <fullMethod>getInitializers()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getShared</methodName>
      <methodSignature>getShared()</methodSignature>
      <fullMethod>getShared()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>getDelegators</methodName>
      <methodSignature>getDelegators()</methodSignature>
      <fullMethod>getDelegators()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Config</className>
      <methodName>configureServiceManager</methodName>
      <methodSignature>configureServiceManager(ServiceManager $serviceManager)</methodSignature>
      <fullMethod>configureServiceManager(ServiceManager $serviceManager)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConfigInterface $config = null)</methodSignature>
      <fullMethod>__construct(ConfigInterface $config = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setAllowOverride</methodName>
      <methodSignature>setAllowOverride($allowOverride)</methodSignature>
      <fullMethod>setAllowOverride($allowOverride)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>getAllowOverride</methodName>
      <methodSignature>getAllowOverride()</methodSignature>
      <fullMethod>getAllowOverride()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setShareByDefault</methodName>
      <methodSignature>setShareByDefault($shareByDefault)</methodSignature>
      <fullMethod>setShareByDefault($shareByDefault)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>shareByDefault</methodName>
      <methodSignature>shareByDefault()</methodSignature>
      <fullMethod>shareByDefault()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setThrowExceptionInCreate</methodName>
      <methodSignature>setThrowExceptionInCreate($throwExceptionInCreate)</methodSignature>
      <fullMethod>setThrowExceptionInCreate($throwExceptionInCreate)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>getThrowExceptionInCreate</methodName>
      <methodSignature>getThrowExceptionInCreate()</methodSignature>
      <fullMethod>getThrowExceptionInCreate()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setRetrieveFromPeeringManagerFirst</methodName>
      <methodSignature>setRetrieveFromPeeringManagerFirst($retrieveFromPeeringManagerFirst = true)</methodSignature>
      <fullMethod>setRetrieveFromPeeringManagerFirst($retrieveFromPeeringManagerFirst = true)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>retrieveFromPeeringManagerFirst</methodName>
      <methodSignature>retrieveFromPeeringManagerFirst()</methodSignature>
      <fullMethod>retrieveFromPeeringManagerFirst()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setInvokableClass</methodName>
      <methodSignature>setInvokableClass($name, $invokableClass, $shared = null)</methodSignature>
      <fullMethod>setInvokableClass($name, $invokableClass, $shared = null)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setFactory</methodName>
      <methodSignature>setFactory($name, $factory, $shared = null)</methodSignature>
      <fullMethod>setFactory($name, $factory, $shared = null)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>addAbstractFactory</methodName>
      <methodSignature>addAbstractFactory($factory, $topOfStack = true)</methodSignature>
      <fullMethod>addAbstractFactory($factory, $topOfStack = true)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>addDelegator</methodName>
      <methodSignature>addDelegator($serviceName, $delegatorFactoryName)</methodSignature>
      <fullMethod>addDelegator($serviceName, $delegatorFactoryName)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>addInitializer</methodName>
      <methodSignature>addInitializer($initializer, $topOfStack = true)</methodSignature>
      <fullMethod>addInitializer($initializer, $topOfStack = true)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setService</methodName>
      <methodSignature>setService($name, $service)</methodSignature>
      <fullMethod>setService($name, $service)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setShared</methodName>
      <methodSignature>setShared($name, $isShared)</methodSignature>
      <fullMethod>setShared($name, $isShared)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>resolveAlias</methodName>
      <methodSignature>resolveAlias($cName)</methodSignature>
      <fullMethod>resolveAlias($cName)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>get</methodName>
      <methodSignature>get($name, $usePeeringServiceManagers = true)</methodSignature>
      <fullMethod>get($name, $usePeeringServiceManagers = true)</fullMethod>
      <crap>68.6</crap>
      <complexity>22</complexity>
      <coverage>54.17</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>create</methodName>
      <methodSignature>create($name)</methodSignature>
      <fullMethod>create($name)</fullMethod>
      <crap>6.6</crap>
      <complexity>4</complexity>
      <coverage>45.45</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>createDelegatorCallback</methodName>
      <methodSignature>createDelegatorCallback($delegatorFactory, $rName, $cName, $creationCallback)</methodSignature>
      <fullMethod>createDelegatorCallback($delegatorFactory, $rName, $cName, $creationCallback)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function () use ($serviceManager, $requestedName, $canonicalName)</methodSignature>
      <fullMethod>anonymous function () use ($serviceManager, $requestedName, $canonicalName)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>doCreate</methodName>
      <methodSignature>doCreate($rName, $cName)</methodSignature>
      <fullMethod>doCreate($rName, $cName)</fullMethod>
      <crap>26.41</crap>
      <complexity>12</complexity>
      <coverage>53.57</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>canCreate</methodName>
      <methodSignature>canCreate($name, $checkAbstractFactories = true)</methodSignature>
      <fullMethod>canCreate($name, $checkAbstractFactories = true)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>has</methodName>
      <methodSignature>has($name, $checkAbstractFactories = true, $usePeeringServiceManagers = true)</methodSignature>
      <fullMethod>has($name, $checkAbstractFactories = true, $usePeeringServiceManagers = true)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>canCreateFromAbstractFactory</methodName>
      <methodSignature>canCreateFromAbstractFactory($cName, $rName)</methodSignature>
      <fullMethod>canCreateFromAbstractFactory($cName, $rName)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>checkForCircularAliasReference</methodName>
      <methodSignature>checkForCircularAliasReference($alias, $nameOrAlias)</methodSignature>
      <fullMethod>checkForCircularAliasReference($alias, $nameOrAlias)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setAlias</methodName>
      <methodSignature>setAlias($alias, $nameOrAlias)</methodSignature>
      <fullMethod>setAlias($alias, $nameOrAlias)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>hasAlias</methodName>
      <methodSignature>hasAlias($alias)</methodSignature>
      <fullMethod>hasAlias($alias)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>createScopedServiceManager</methodName>
      <methodSignature>createScopedServiceManager($peering = self::SCOPE_PARENT)</methodSignature>
      <fullMethod>createScopedServiceManager($peering = self::SCOPE_PARENT)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>addPeeringServiceManager</methodName>
      <methodSignature>addPeeringServiceManager(ServiceManager $manager, $peering = self::SCOPE_PARENT)</methodSignature>
      <fullMethod>addPeeringServiceManager(ServiceManager $manager, $peering = self::SCOPE_PARENT)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>canonicalizeName</methodName>
      <methodSignature>canonicalizeName($name)</methodSignature>
      <fullMethod>canonicalizeName($name)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>createServiceViaCallback</methodName>
      <methodSignature>createServiceViaCallback($callable, $cName, $rName)</methodSignature>
      <fullMethod>createServiceViaCallback($callable, $cName, $rName)</fullMethod>
      <crap>9.16</crap>
      <complexity>5</complexity>
      <coverage>45</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>getRegisteredServices</methodName>
      <methodSignature>getRegisteredServices()</methodSignature>
      <fullMethod>getRegisteredServices()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>getCanonicalNames</methodName>
      <methodSignature>getCanonicalNames()</methodSignature>
      <fullMethod>getCanonicalNames()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>setCanonicalNames</methodName>
      <methodSignature>setCanonicalNames($canonicalNames)</methodSignature>
      <fullMethod>setCanonicalNames($canonicalNames)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>retrieveFromPeeringManager</methodName>
      <methodSignature>retrieveFromPeeringManager($name)</methodSignature>
      <fullMethod>retrieveFromPeeringManager($name)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>createFromInvokable</methodName>
      <methodSignature>createFromInvokable($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createFromInvokable($canonicalName, $requestedName)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>createFromFactory</methodName>
      <methodSignature>createFromFactory($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createFromFactory($canonicalName, $requestedName)</fullMethod>
      <crap>9.01</crap>
      <complexity>6</complexity>
      <coverage>56.25</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>createFromAbstractFactory</methodName>
      <methodSignature>createFromAbstractFactory($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createFromAbstractFactory($canonicalName, $requestedName)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>checkNestedContextStart</methodName>
      <methodSignature>checkNestedContextStart($cName)</methodSignature>
      <fullMethod>checkNestedContextStart($cName)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>checkNestedContextStop</methodName>
      <methodSignature>checkNestedContextStop($force = false)</methodSignature>
      <fullMethod>checkNestedContextStop($force = false)</fullMethod>
      <crap>3.33</crap>
      <complexity>3</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>createDelegatorFromFactory</methodName>
      <methodSignature>createDelegatorFromFactory($canonicalName, $requestedName)</methodSignature>
      <fullMethod>createDelegatorFromFactory($canonicalName, $requestedName)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>isSubclassOf</methodName>
      <methodSignature>isSubclassOf($className, $type)</methodSignature>
      <fullMethod>isSubclassOf($className, $type)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ServiceManager</className>
      <methodName>unregisterService</methodName>
      <methodSignature>unregisterService($canonical)</methodSignature>
      <fullMethod>unregisterService($canonical)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($options = null)</methodSignature>
      <fullMethod>__construct($options = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>setFromArray</methodName>
      <methodSignature>setFromArray($options)</methodSignature>
      <fullMethod>setFromArray($options)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>toArray</methodName>
      <methodSignature>toArray()</methodSignature>
      <fullMethod>toArray()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($letters)</methodSignature>
      <fullMethod>anonymous function ($letters)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>__set</methodName>
      <methodSignature>__set($key, $value)</methodSignature>
      <fullMethod>__set($key, $value)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>__get</methodName>
      <methodSignature>__get($key)</methodSignature>
      <fullMethod>__get($key)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>__isset</methodName>
      <methodSignature>__isset($key)</methodSignature>
      <fullMethod>__isset($key)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>AbstractOptions</className>
      <methodName>__unset</methodName>
      <methodSignature>__unset($key)</methodSignature>
      <fullMethod>__unset($key)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>hasStringKeys</methodName>
      <methodSignature>hasStringKeys($value, $allowEmpty = false)</methodSignature>
      <fullMethod>hasStringKeys($value, $allowEmpty = false)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>hasIntegerKeys</methodName>
      <methodSignature>hasIntegerKeys($value, $allowEmpty = false)</methodSignature>
      <fullMethod>hasIntegerKeys($value, $allowEmpty = false)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>hasNumericKeys</methodName>
      <methodSignature>hasNumericKeys($value, $allowEmpty = false)</methodSignature>
      <fullMethod>hasNumericKeys($value, $allowEmpty = false)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>isList</methodName>
      <methodSignature>isList($value, $allowEmpty = false)</methodSignature>
      <fullMethod>isList($value, $allowEmpty = false)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>isHashTable</methodName>
      <methodSignature>isHashTable($value, $allowEmpty = false)</methodSignature>
      <fullMethod>isHashTable($value, $allowEmpty = false)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>inArray</methodName>
      <methodSignature>inArray($needle, array $haystack, $strict = false)</methodSignature>
      <fullMethod>inArray($needle, array $haystack, $strict = false)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>iteratorToArray</methodName>
      <methodSignature>iteratorToArray($iterator, $recursive = true)</methodSignature>
      <fullMethod>iteratorToArray($iterator, $recursive = true)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package/>
      <className>ArrayUtils</className>
      <methodName>merge</methodName>
      <methodSignature>merge(array $a, array $b, $preserveNumericKeys = false)</methodSignature>
      <fullMethod>merge(array $a, array $b, $preserveNumericKeys = false)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($callback, array $metadata = array())</methodSignature>
      <fullMethod>__construct($callback, array $metadata = array())</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>registerCallback</methodName>
      <methodSignature>registerCallback($callback)</methodSignature>
      <fullMethod>registerCallback($callback)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>getCallback</methodName>
      <methodSignature>getCallback()</methodSignature>
      <fullMethod>getCallback()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>call</methodName>
      <methodSignature>call(array $args = array())</methodSignature>
      <fullMethod>call(array $args = array())</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke()</methodSignature>
      <fullMethod>__invoke()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>getMetadata</methodName>
      <methodSignature>getMetadata()</methodSignature>
      <fullMethod>getMetadata()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>getMetadatum</methodName>
      <methodSignature>getMetadatum($name)</methodSignature>
      <fullMethod>getMetadatum($name)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>CallbackHandler</className>
      <methodName>validateStringCallbackFor54</methodName>
      <methodSignature>validateStringCallbackFor54($callback)</methodSignature>
      <fullMethod>validateStringCallbackFor54($callback)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ErrorHandler</className>
      <methodName>started</methodName>
      <methodSignature>started()</methodSignature>
      <fullMethod>started()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ErrorHandler</className>
      <methodName>getNestedLevel</methodName>
      <methodSignature>getNestedLevel()</methodSignature>
      <fullMethod>getNestedLevel()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ErrorHandler</className>
      <methodName>start</methodName>
      <methodSignature>start($errorLevel = \E_WARNING)</methodSignature>
      <fullMethod>start($errorLevel = \E_WARNING)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ErrorHandler</className>
      <methodName>stop</methodName>
      <methodSignature>stop($throw = false)</methodSignature>
      <fullMethod>stop($throw = false)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ErrorHandler</className>
      <methodName>clean</methodName>
      <methodSignature>clean()</methodSignature>
      <fullMethod>clean()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ErrorHandler</className>
      <methodName>addError</methodName>
      <methodSignature>addError($errno, $errstr = '', $errfile = '', $errline = 0)</methodSignature>
      <fullMethod>addError($errno, $errstr = '', $errfile = '', $errline = 0)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Glob</className>
      <methodName>glob</methodName>
      <methodSignature>glob($pattern, $flags = 0, $forceFallback = false)</methodSignature>
      <fullMethod>glob($pattern, $flags = 0, $forceFallback = false)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Glob</className>
      <methodName>systemGlob</methodName>
      <methodSignature>systemGlob($pattern, $flags)</methodSignature>
      <fullMethod>systemGlob($pattern, $flags)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>Glob</className>
      <methodName>fallbackGlob</methodName>
      <methodSignature>fallbackGlob($pattern, $flags)</methodSignature>
      <fullMethod>fallbackGlob($pattern, $flags)</fullMethod>
      <crap>240</crap>
      <complexity>15</complexity>
      <coverage>0</coverage>
      <crapLoad>16</crapLoad>
    </method>
    <method>
      <package/>
      <className>Glob</className>
      <methodName>nextBraceSub</methodName>
      <methodSignature>nextBraceSub($pattern, $begin, $flags)</methodSignature>
      <fullMethod>nextBraceSub($pattern, $begin, $flags)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package/>
      <className>HydratorPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>insert</methodName>
      <methodSignature>insert($data, $priority = 1)</methodSignature>
      <fullMethod>insert($data, $priority = 1)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>remove</methodName>
      <methodSignature>remove($datum)</methodSignature>
      <fullMethod>remove($datum)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>isEmpty</methodName>
      <methodSignature>isEmpty()</methodSignature>
      <fullMethod>isEmpty()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>count</methodName>
      <methodSignature>count()</methodSignature>
      <fullMethod>count()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>top</methodName>
      <methodSignature>top()</methodSignature>
      <fullMethod>top()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>extract</methodName>
      <methodSignature>extract()</methodSignature>
      <fullMethod>extract()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>getIterator</methodName>
      <methodSignature>getIterator()</methodSignature>
      <fullMethod>getIterator()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>unserialize</methodName>
      <methodSignature>unserialize($data)</methodSignature>
      <fullMethod>unserialize($data)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>toArray</methodName>
      <methodSignature>toArray($flag = self::EXTR_DATA)</methodSignature>
      <fullMethod>toArray($flag = self::EXTR_DATA)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($item)</methodSignature>
      <fullMethod>anonymous function ($item)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>setInternalQueueClass</methodName>
      <methodSignature>setInternalQueueClass($class)</methodSignature>
      <fullMethod>setInternalQueueClass($class)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>contains</methodName>
      <methodSignature>contains($datum)</methodSignature>
      <fullMethod>contains($datum)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>hasPriority</methodName>
      <methodSignature>hasPriority($priority)</methodSignature>
      <fullMethod>hasPriority($priority)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>getQueue</methodName>
      <methodSignature>getQueue()</methodSignature>
      <fullMethod>getQueue()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>PriorityQueue</className>
      <methodName>__clone</methodName>
      <methodSignature>__clone()</methodSignature>
      <fullMethod>__clone()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SplPriorityQueue</className>
      <methodName>insert</methodName>
      <methodSignature>insert($datum, $priority)</methodSignature>
      <fullMethod>insert($datum, $priority)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SplPriorityQueue</className>
      <methodName>toArray</methodName>
      <methodSignature>toArray()</methodSignature>
      <fullMethod>toArray()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SplPriorityQueue</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>SplPriorityQueue</className>
      <methodName>unserialize</methodName>
      <methodSignature>unserialize($data)</methodSignature>
      <fullMethod>unserialize($data)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ValidatorPluginManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConfigInterface $configuration = null)</methodSignature>
      <fullMethod>__construct(ConfigInterface $configuration = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ValidatorPluginManager</className>
      <methodName>injectTranslator</methodName>
      <methodSignature>injectTranslator($validator)</methodSignature>
      <fullMethod>injectTranslator($validator)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ValidatorPluginManager</className>
      <methodName>injectValidatorPluginManager</methodName>
      <methodSignature>injectValidatorPluginManager($validator)</methodSignature>
      <fullMethod>injectValidatorPluginManager($validator)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>ValidatorPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperPluginManager</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ConfigInterface $configuration = null)</methodSignature>
      <fullMethod>__construct(ConfigInterface $configuration = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperPluginManager</className>
      <methodName>setRenderer</methodName>
      <methodSignature>setRenderer(Renderer\RendererInterface $renderer)</methodSignature>
      <fullMethod>setRenderer(Renderer\RendererInterface $renderer)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperPluginManager</className>
      <methodName>getRenderer</methodName>
      <methodSignature>getRenderer()</methodSignature>
      <fullMethod>getRenderer()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperPluginManager</className>
      <methodName>injectRenderer</methodName>
      <methodSignature>injectRenderer($helper)</methodSignature>
      <fullMethod>injectRenderer($helper)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperPluginManager</className>
      <methodName>injectTranslator</methodName>
      <methodSignature>injectTranslator($helper)</methodSignature>
      <fullMethod>injectTranslator($helper)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package/>
      <className>HelperPluginManager</className>
      <methodName>validatePlugin</methodName>
      <methodSignature>validatePlugin($plugin)</methodSignature>
      <fullMethod>validatePlugin($plugin)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
